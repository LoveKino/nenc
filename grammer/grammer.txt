# be careful: space between symbols

S := PROGRAM

PROGRAM := STATEMENTS

STATEMENTS := STATEMENT | STATEMENT ; STATEMENTS

STATEMENT := EXP | EPSILON

EXP := JSON | variable | ABSTRACTION | APPLICATION

# standard math style function calling, eg: f(1, 2)
APPLICATION := CALLER ( ) | CALLER ( EXP_LIST )

# CALLER stands for any thing which can used directly as a function
CALLER := variable | APPLICATION | ( ABSTRACTION )

EXP_LIST := EXP | EXP , EXP_LIST

ABSTRACTION := ( ) -> EXP | ( LIST_VARIABLES ) -> EXP | ( ) -> { PROGRAM } | ( LIST_VARIABLES ) -> { PROGRAM }

LIST_VARIABLES := variable | variable , LIST_VARIABLES

# below is the definition of ordinary json

JSON := string | number | OBJECT | ARRAY | true | false | null

OBJECT := { KEY_VALUES } | { }

KEY_VALUES := string colon JSON | string colon JSON , KEY_VALUES

ARRAY := [ ] | [ LIST_VALUES ]

LIST_VALUES := JSON | JSON , LIST_VALUES
