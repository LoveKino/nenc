# be careful: space between symbols

S := PROGRAM    @$1

PROGRAM := STATEMENTS   @sys_statements($1)

STATEMENTS := NONE_EMPTY_STATEMENTS    @$1
    | EPSILON                          @empty()

NONE_EMPTY_STATEMENTS := STATEMENT    @single($1)
    | STATEMENT ; STATEMENTS          @concat(single($1), $3)

STATEMENT := EXP           @sys_exp($1)
    | LET_EXPRESSION       @$1
    | IMPORT_EXPRESSION    @$1

# import module
IMPORT_EXPRESSION := import string as variable    @sys_import(sys_string(stringContent($2)), sys_variable($4))

# let statement
LET_EXPRESSION := let VARIABLE_DEFINITION_LIST    @sys_letBinding($2)

VARIABLE_DEFINITION_LIST := VARIABLE_DEFINITION          @single($1)
    |  VARIABLE_DEFINITION , VARIABLE_DEFINITION_LIST    @concat(single($1), $3)

VARIABLE_DEFINITION := variable    @single($1)
    | variable = EXP               @concat(single($1), single($3))

EXP := DATA             @$1
    | variable          @sys_variable($1)
    | ABSTRACTION       @$1
    | APPLICATION       @$1
    | CODE_BLOCK_EXP    @$1
    | CONDITION_EXP     @$1

CODE_BLOCK_EXP := { NONE_EMPTY_STATEMENTS }    @sys_application(sys_abstraction(empty(), single(single(sys_statements($2)))), empty())

CONDITION_EXP := EXP ? EXP : EXP    @sys_condition($1, $3, $5)

# standard math style function calling, eg: f(1, 2)
APPLICATION := CALLER ( )    @sys_application($1, empty())
    | CALLER ( EXP_LIST )    @sys_application($1, $3)

# CALLER stands for any thing which can used directly as a function
CALLER := variable       @sys_variable($1)
    | APPLICATION        @$1
    | ( ABSTRACTION )    @$2

EXP_LIST := EXP         @single($1)
    | EXP , EXP_LIST    @concat(single($1), $3)

# define abstraction
ABSTRACTION := ( ) -> ABSTRACTION_BODY          @sys_abstraction(empty(), $4)
    | ( LIST_VARIABLES ) -> ABSTRACTION_BODY    @sys_abstraction($2, $5)

ABSTRACTION_BODY := EXP_LIST                   @single($1) 
    | EXP_LIST verticalBar ABSTRACTION_BODY    @concat(single($1), $3)

LIST_VARIABLES := variable         @single(sys_variable($1))
    | variable , LIST_VARIABLES    @concat(single(sys_variable($1)), $3)

# below is the definition of ordinary json
DATA := string    @sys_string(stringContent($1))
    | number      @sys_number($1)
    | OBJECT      @$1
    | ARRAY       @$1
    | true        @sys_true()
    | false       @sys_false()
    | null        @sys_null()

OBJECT := { KEY_VALUES }    @sys_object($2)
    | { }                   @sys_object(empty())

KEY_VALUES := string : PROGRAM         @concat(single(sys_string(stringContent($1))), single($3))
    | string : PROGRAM , KEY_VALUES    @concat(concat(single(sys_string(stringContent($1))), single($3)), $5)

ARRAY := [ ]             @sys_array(empty())
    | [ LIST_VALUES ]    @sys_array($2)

LIST_VALUES := PROGRAM         @single($1)
    | PROGRAM , LIST_VALUES    @concat(single($1), $3)
