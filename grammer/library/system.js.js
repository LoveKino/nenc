module.exports = "/**\n * provide basic function support for pfc middle code\n */\n\n/**\n * basic data container\n */\nvar Void = {};\n\nvar isVoid = function(v) {\n    return v === Void;\n};\n\nfunction Pair(v1, v2) {\n    this.v1 = v1;\n    this.v2 = v2;\n}\n\nPair.prototype.getValueList = function() {\n    let result = [];\n    if (isPair(this.v1)) {\n        result = this.v1.getValueList();\n    } else {\n        result = [this.v1];\n    }\n\n    if (isPair(this.v2)) {\n        result = result.concat(this.v2.getValueList());\n    } else {\n        result.push(this.v2);\n    }\n\n    return result;\n};\n\nvar isPair = function(v) {\n    return v instanceof Pair;\n};\n\n/**\n * main interfaces\n */\n\nvar sys_void = function() {\n    return Void;\n};\n\nvar sys_pair = function(v1, v2) {\n    return new Pair(v1, v2);\n};\n\nvar sys_variable = function() {};\n\n// composed data types\nvar sys_object = function(v) {\n    if (isVoid(v)) return {};\n    // get list of values\n    // join to map\n    var result = {};\n    var list = v.getValueList();\n    var i = 0,\n        len = list.length;\n    while (i < len) {\n        var key = list[i];\n        var value = list[i + 1];\n        result[key] = value;\n        i += 2;\n    }\n\n    return result;\n};\n\nvar sys_array = function(v) {\n    if (isVoid(v)) return [];\n    // get list of values\n    // join to list\n    return v.getValueList();\n};\n\n// basic data types\nvar sys_string = function(str) {\n    return str;\n};\n\nvar sys_number = function(numberStr) {\n    return numberStr;\n};\n\nvar sys_true = function() {\n    return true;\n};\n\nvar sys_false = function() {\n    return false;\n};\n\nvar sys_null = function() {\n    return null;\n};\n\nvar result = {\n    sys_void,\n    sys_pair,\n\n    sys_variable,\n\n    sys_string,\n    sys_number,\n    sys_true,\n    sys_false,\n    sys_null,\n    sys_object,\n    sys_array\n};\n\nif (typeof module === 'object' && module) {\n    module.exports = result;\n}\n\nreturn result;\n"